// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Meetups tests renders without crashing 1`] = `
<div
  className="innerWrap"
>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <meta
      charSet="utf-8"
    />
    <meta
      content="Meetups near you!"
      name="description"
    />
    <title>
      Meetups
    </title>
  </HelmetWrapper>
  <div
    className="innerLeft"
    style={
      Object {
        "overflow": "auto",
      }
    }
  >
    <div
      className="innerLeftHeader"
    >
      <div>
        Meetups
      </div>
      <WithStyles(ForwardRef(Button))
        aria-label="add-meetup"
        color="primary"
        onClick={[Function]}
        size="small"
        variant="contained"
      >
        Create
      </WithStyles(ForwardRef(Button))>
    </div>
    <div
      className="innerLeftHeaderBlock"
    >
      <div
        className="hr"
      >
        Settings
      </div>
      <div
        className="innerLeftHeaderBlockAction"
      >
        <div
          className="blockActionHeader"
        >
          Type
        </div>
        <div
          className="blockActionContent"
        >
          <div
            className="meetupTypes"
          >
            <div
              aria-label="public-meetups"
              className="meetupType meetupTypeActive elevate-0"
              onClick={[Function]}
            >
              Public
            </div>
            <div
              aria-label="private-meetups"
              className="meetupType  elevate-0"
              onClick={[Function]}
            >
              Private
            </div>
          </div>
        </div>
      </div>
      <div
        className="innerLeftHeaderBlockAction"
      >
        <div
          className="blockActionHeader"
        >
          Dates
        </div>
        <div
          className="blockActionContent calendar"
        >
          <withStyles(DateRangePicker)
            anchorDirection="left"
            appendToBody={false}
            block={false}
            calendarInfoPosition="bottom"
            customArrowIcon={null}
            customCloseIcon={null}
            customInputIcon={null}
            dayPickerNavigationInlineStyles={null}
            daySize={45}
            disableScroll={false}
            disabled={false}
            displayFormat="MMM DD"
            enableOutsideDays={false}
            endDate={"2020-05-18T02:16:35.233Z"}
            endDateId="unique_end_date_id"
            endDatePlaceholderText="End Date"
            firstDayOfWeek={null}
            focusedInput={null}
            hideKeyboardShortcutsPanel={true}
            horizontalMargin={0}
            initialVisibleMonth={null}
            inputIconPosition="before"
            isDayBlocked={[Function]}
            isDayHighlighted={[Function]}
            isOutsideRange={[Function]}
            isRTL={false}
            keepFocusOnInput={false}
            keepOpenOnDateSelect={true}
            minimumNights={0}
            monthFormat="MMMM YYYY"
            navNext={null}
            navPosition="navPositionTop"
            navPrev={null}
            noBorder={true}
            numberOfMonths={2}
            onClose={[Function]}
            onDatesChange={[Function]}
            onFocusChange={[Function]}
            onNextMonthClick={[Function]}
            onPrevMonthClick={[Function]}
            openDirection="down"
            orientation="horizontal"
            phrases={
              Object {
                "calendarLabel": "Calendar",
                "chooseAvailableEndDate": [Function],
                "chooseAvailableStartDate": [Function],
                "clearDates": "Clear Dates",
                "closeDatePicker": "Close",
                "dateIsSelected": [Function],
                "dateIsSelectedAsEndDate": [Function],
                "dateIsSelectedAsStartDate": [Function],
                "dateIsUnavailable": [Function],
                "enterKey": "Enter key",
                "escape": "Escape key",
                "focusStartDate": "Interact with the calendar and add the check-in date for your trip.",
                "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                "homeEnd": "Home and end keys",
                "jumpToNextMonth": "Move forward to switch to the next month.",
                "jumpToPrevMonth": "Move backward to switch to the previous month.",
                "keyboardBackwardNavigationInstructions": "Navigate backward to interact with the calendar and select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                "keyboardForwardNavigationInstructions": "Navigate forward to interact with the calendar and select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                "keyboardShortcuts": "Keyboard Shortcuts",
                "leftArrowRightArrow": "Right and left arrow keys",
                "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                "moveFocusByOneMonth": "Switch months.",
                "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                "openThisPanel": "Open this panel.",
                "pageUpPageDown": "page up and page down keys",
                "questionMark": "Question mark",
                "returnFocusToInput": "Return to the date input field.",
                "roleDescription": "datepicker",
                "selectFocusedDate": "Select the date in focus.",
                "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                "upArrowDownArrow": "up and down arrow keys",
              }
            }
            readOnly={false}
            regular={false}
            renderCalendarInfo={null}
            renderDayContents={null}
            renderMonthElement={null}
            renderMonthText={null}
            renderNavNextButton={null}
            renderNavPrevButton={null}
            renderWeekHeaderElement={null}
            reopenPickerOnClearDates={false}
            required={false}
            screenReaderInputMessage=""
            showClearDates={false}
            showDefaultInputIcon={false}
            small={true}
            startDate={"2020-05-11T02:16:35.233Z"}
            startDateId="unique_start_date_id"
            startDatePlaceholderText="Start Date"
            verticalHeight={null}
            verticalSpacing={22}
            weekDayFormat="dd"
            withFullScreenPortal={false}
            withPortal={false}
          />
        </div>
      </div>
      <div
        className="innerLeftHeaderBlockAction"
      >
        <div
          className="blockActionHeader"
        >
          Radius
        </div>
        <div
          className="blockActionContent"
        >
          <WithStyles(ForwardRef(Slider))
            disabled={false}
            marks={
              Array [
                Object {
                  "value": 5,
                },
                Object {
                  "value": 10,
                },
                Object {
                  "value": 15,
                },
                Object {
                  "value": 20,
                },
                Object {
                  "value": 25,
                },
              ]
            }
            max={25}
            min={5}
            onChange={[Function]}
            onChangeCommitted={[Function]}
            step={5}
            value={25}
            valueLabelDisplay="off"
          />
          <div
            className="blockActionChip"
            style={
              Object {
                "marginLeft": "10px",
              }
            }
          >
            25 miles
          </div>
        </div>
      </div>
      <div
        className="innerLeftHeaderBlockAction"
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <div
          className="blockActionHeader"
        >
          Categories
        </div>
        <div
          className="blockActionContent"
        >
          <div
            className="meetupsSearchBar elevate-0"
          >
            <CategoryAutocomplete
              entries={Array []}
              fullWidth={true}
              handleClick={[Function]}
              label="Search Categories..."
              size="small"
            />
          </div>
        </div>
      </div>
      <div
        className="hr"
      >
        Preferences
      </div>
      <div
        className="preferences"
      >
        <div
          className="preset"
        />
      </div>
    </div>
  </div>
  <div
    className="innerRight"
  >
    <div
      className="innerRightBlock"
    >
      <div
        className="innerRightBlockHeader"
      >
        <div
          className="hr"
        >
          Meetups Near You
        </div>
      </div>
      <div
        className="meetupsContainer"
        style={
          Object {
            "minHeight": "0",
          }
        }
      >
        <WithStyles(ForwardRef(Grid))
          container={true}
          spacing={3}
        >
          <WithStyles(ForwardRef(Grid))
            item={true}
            key="1"
            lg={6}
            xl={4}
            xs={12}
          >
            <ForwardRef(Grow)
              in={true}
              timeout={500}
            >
              <div
                className="meetups-cardwrapper"
              >
                <MeetupCard
                  key="1"
                  meetup={
                    Object {
                      "categories": Array [
                        Object {
                          "api_label": "desserts",
                          "id": 1,
                          "image": null,
                          "label": "Dessert",
                        },
                      ],
                      "creator": Object {
                        "avatar": null,
                        "email": "daniel@gmail.com",
                        "first_name": "Daniel",
                        "id": 1,
                        "last_name": "Lee",
                      },
                      "date": "2020-05-10",
                      "events": Object {},
                      "id": 1,
                      "isMeetupEventsInitialized": true,
                      "latitude": 34.228754,
                      "location": "location",
                      "longitude": -118.2351192,
                      "members": Object {
                        "1": Object {
                          "admin": true,
                          "ban": false,
                          "id": 1,
                          "user": Object {
                            "avatar": null,
                            "email": "daniel@gmail.com",
                            "first_name": "Daniel",
                            "id": 1,
                            "last_name": "Lee",
                          },
                        },
                        "2": Object {
                          "admin": false,
                          "ban": false,
                          "id": 2,
                          "user": Object {
                            "avatar": null,
                            "email": "example2@gmail.com",
                            "first_name": "Bob",
                            "id": 2,
                            "last_name": "Jim",
                          },
                        },
                      },
                      "name": "Meetup",
                      "notifs": 0,
                      "public": true,
                      "uri": "uri",
                    }
                  }
                />
              </div>
            </ForwardRef(Grow)>
          </WithStyles(ForwardRef(Grid))>
          <WithStyles(ForwardRef(Grid))
            item={true}
            key="2"
            lg={6}
            xl={4}
            xs={12}
          >
            <ForwardRef(Grow)
              in={true}
              timeout={500}
            >
              <div
                className="meetups-cardwrapper"
              >
                <MeetupCard
                  key="2"
                  meetup={
                    Object {
                      "categories": Array [
                        Object {
                          "api_label": "desserts",
                          "id": 1,
                          "image": null,
                          "label": "Dessert",
                        },
                      ],
                      "creator": Object {
                        "avatar": null,
                        "email": "daniel@gmail.com",
                        "first_name": "Daniel",
                        "id": 1,
                        "last_name": "Lee",
                      },
                      "date": "2020-05-10",
                      "events": Object {},
                      "id": 2,
                      "isMeetupEventsInitialized": true,
                      "latitude": 34.228754,
                      "location": "location",
                      "longitude": -118.2351192,
                      "members": Object {
                        "1": Object {
                          "admin": true,
                          "ban": false,
                          "id": 1,
                          "user": Object {
                            "avatar": null,
                            "email": "daniel@gmail.com",
                            "first_name": "Daniel",
                            "id": 1,
                            "last_name": "Lee",
                          },
                        },
                        "2": Object {
                          "admin": false,
                          "ban": false,
                          "id": 2,
                          "user": Object {
                            "avatar": null,
                            "email": "example2@gmail.com",
                            "first_name": "Bob",
                            "id": 2,
                            "last_name": "Jim",
                          },
                        },
                      },
                      "name": "Meetup",
                      "notifs": 0,
                      "public": false,
                      "uri": "uri2",
                    }
                  }
                />
              </div>
            </ForwardRef(Grow)>
          </WithStyles(ForwardRef(Grid))>
        </WithStyles(ForwardRef(Grid))>
      </div>
    </div>
    <Connect(ReduxForm)
      handleClose={[Function]}
      open={false}
      type="create"
    />
  </div>
</div>
`;
