// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Meetups tests renders without crashing 1`] = `
<div
  className="searchPage "
>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <meta
      charSet="utf-8"
    />
    <meta
      content="Meetups near you!"
      name="description"
    />
    <title>
      Meetups
    </title>
  </HelmetWrapper>
  <div
    className="searchConfig "
  >
    <div
      className="header"
    >
      <div>
        No Filters
        <div
          className="clearFilters"
          onClick={[Function]}
        />
      </div>
      <div>
        <WithStyles(ForwardRef(Fab))
          aria-label="add-meetup"
          color="secondary"
          onClick={[Function]}
          size="medium"
        >
          <AddIcon />
        </WithStyles(ForwardRef(Fab))>
      </div>
    </div>
    <div
      className="filter"
    >
      <div
        className="filterTitle"
      >
        Location
      </div>
      <div
        className="filterSetting"
      >
        <Location
          background="#fff"
          freeSolo={true}
          handleClick={[Function]}
          handleInputChange={[Function]}
          label="Location"
          required={false}
          textValue=""
        />
      </div>
    </div>
    <div
      className="filter"
    >
      <div
        className="filterTitle"
      >
        Type
      </div>
      <div
        className="filterSetting"
      >
        <WithStyles(ForwardRef(FormControlLabel))
          control={
            <ForwardRef(WithStyles)
              checked={true}
              color="primary"
              onClick={[Function]}
              size="small"
            />
          }
          label="Public"
        />
        <WithStyles(ForwardRef(FormControlLabel))
          control={
            <ForwardRef(WithStyles)
              checked={false}
              color="primary"
              onClick={[Function]}
              size="small"
            />
          }
          label="Private"
        />
      </div>
    </div>
    <div
      className="filter"
    >
      <div
        className="filterTitle"
      >
        Dates
      </div>
      <div
        className="filterSetting"
      >
        <withStyles(DateRangePicker)
          anchorDirection="left"
          appendToBody={false}
          block={false}
          calendarInfoPosition="bottom"
          customArrowIcon={null}
          customCloseIcon={null}
          customInputIcon={null}
          dayPickerNavigationInlineStyles={null}
          daySize={45}
          disableScroll={false}
          disabled={false}
          displayFormat="MMMM DD"
          enableOutsideDays={false}
          endDate={"2020-07-10T20:42:54.554Z"}
          endDateId="unique_end_date_id"
          endDatePlaceholderText="End Date"
          firstDayOfWeek={null}
          focusedInput={null}
          hideKeyboardShortcutsPanel={true}
          horizontalMargin={0}
          initialVisibleMonth={null}
          inputIconPosition="before"
          isDayBlocked={[Function]}
          isDayHighlighted={[Function]}
          isOutsideRange={[Function]}
          isRTL={false}
          keepFocusOnInput={false}
          keepOpenOnDateSelect={true}
          minimumNights={0}
          monthFormat="MMMM YYYY"
          navNext={null}
          navPosition="navPositionTop"
          navPrev={null}
          noBorder={true}
          numberOfMonths={2}
          onClose={[Function]}
          onDatesChange={[Function]}
          onFocusChange={[Function]}
          onNextMonthClick={[Function]}
          onPrevMonthClick={[Function]}
          openDirection="down"
          orientation="horizontal"
          phrases={
            Object {
              "calendarLabel": "Calendar",
              "chooseAvailableEndDate": [Function],
              "chooseAvailableStartDate": [Function],
              "clearDates": "Clear Dates",
              "closeDatePicker": "Close",
              "dateIsSelected": [Function],
              "dateIsSelectedAsEndDate": [Function],
              "dateIsSelectedAsStartDate": [Function],
              "dateIsUnavailable": [Function],
              "enterKey": "Enter key",
              "escape": "Escape key",
              "focusStartDate": "Interact with the calendar and add the check-in date for your trip.",
              "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
              "homeEnd": "Home and end keys",
              "jumpToNextMonth": "Move forward to switch to the next month.",
              "jumpToPrevMonth": "Move backward to switch to the previous month.",
              "keyboardBackwardNavigationInstructions": "Navigate backward to interact with the calendar and select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
              "keyboardForwardNavigationInstructions": "Navigate forward to interact with the calendar and select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
              "keyboardShortcuts": "Keyboard Shortcuts",
              "leftArrowRightArrow": "Right and left arrow keys",
              "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
              "moveFocusByOneMonth": "Switch months.",
              "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
              "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
              "openThisPanel": "Open this panel.",
              "pageUpPageDown": "page up and page down keys",
              "questionMark": "Question mark",
              "returnFocusToInput": "Return to the date input field.",
              "roleDescription": "datepicker",
              "selectFocusedDate": "Select the date in focus.",
              "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
              "upArrowDownArrow": "up and down arrow keys",
            }
          }
          readOnly={false}
          regular={false}
          renderCalendarInfo={null}
          renderDayContents={null}
          renderMonthElement={null}
          renderMonthText={null}
          renderNavNextButton={null}
          renderNavPrevButton={null}
          renderWeekHeaderElement={null}
          reopenPickerOnClearDates={false}
          required={false}
          screenReaderInputMessage=""
          showClearDates={false}
          showDefaultInputIcon={false}
          small={true}
          startDate={"2020-07-03T20:42:54.554Z"}
          startDateId="unique_start_date_id"
          startDatePlaceholderText="Start Date"
          verticalHeight={null}
          verticalSpacing={22}
          weekDayFormat="dd"
          withFullScreenPortal={false}
          withPortal={false}
        />
      </div>
    </div>
    <div
      className="filter"
    >
      <div
        className="filterTitle"
      >
        Radius
        <span
          className="chip"
          style={
            Object {
              "marginLeft": 10,
            }
          }
        >
          25 miles
        </span>
      </div>
      <div
        className="filterSetting"
      >
        <WithStyles(ForwardRef(Slider))
          marks={
            Array [
              Object {
                "value": 5,
              },
              Object {
                "value": 10,
              },
              Object {
                "value": 15,
              },
              Object {
                "value": 20,
              },
              Object {
                "value": 25,
              },
            ]
          }
          max={25}
          min={5}
          onChange={[Function]}
          onChangeCommitted={[Function]}
          step={5}
          value={25}
          valueLabelDisplay="off"
        />
      </div>
    </div>
    <div
      className="filter"
    >
      <div
        className="filterTitle"
      >
        Categories
      </div>
      <div
        className="filterSetting"
      >
        <CategoryAutocomplete
          background="#fff"
          entries={Array []}
          fullWidth={true}
          handleClick={[Function]}
          label="Search Categories..."
          size="small"
        />
      </div>
    </div>
    <div
      className="filter"
    >
      <div
        className="filterTitle"
      >
        Preferences
      </div>
      <div
        className="filterSetting"
      >
        <div
          className="preset"
        >
          <div
            className="presetCategory "
            key="1"
            onClick={[Function]}
          >
            <WithStyles(ForwardRef(Avatar))
              src="undefined/static/category/desserts.png"
              variant="square"
            />
            <span>
              Dessert
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="resultsWrapper "
  >
    <div
      className="resultsTop"
    >
      <div
        className="resultsName"
      >
        Meetups Near 
        Me
      </div>
    </div>
    <div
      className="results"
    >
      <SkeletonRestaurant />
      <SkeletonRestaurant />
      <SkeletonRestaurant />
      <SkeletonRestaurant />
      <SkeletonRestaurant />
      <SkeletonRestaurant />
      <SkeletonRestaurant />
      <SkeletonRestaurant />
      <SkeletonRestaurant />
      <SkeletonRestaurant />
    </div>
    <div
      className="resultsPagination"
    >
      <WithStyles(ForwardRef(Pagination))
        count={0}
        onChange={[Function]}
        page={1}
        shape="rounded"
      />
      <div
        className="resultsCount"
      >
        1
         - 
        0
         of 
         entries
      </div>
    </div>
  </div>
  <div
    className="searchMap "
  />
  <Connect(ReduxForm)
    handleClose={[Function]}
    isMobile={false}
    open={false}
    type="create"
  />
</div>
`;
