// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Meetups tests renders without crashing 1`] = `
<div
  className="meetups"
>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <meta
      charSet="utf-8"
    />
    <meta
      content="Meetups near you!"
      name="description"
    />
    <title>
      Meetups
    </title>
  </HelmetWrapper>
  <div
    className="meetupsCategories"
  >
    <WithStyles(ForwardRef(Paper))
      className="meetupsCategoriesInner"
      elevation={2}
      square={true}
    >
      <div
        className="meetupsCategoriesTop"
      >
        <div>
          Preferences
        </div>
        <div>
          <Link
            to={
              Object {
                "pathname": "/profile/1",
                "state": Object {
                  "locked": false,
                },
              }
            }
          >
            <WithStyles(ForwardRef(Tooltip))
              title="Edit Preferences"
            >
              <WithStyles(ForwardRef(IconButton))
                edge="end"
                style={
                  Object {
                    "color": "black",
                  }
                }
              >
                <EditIcon />
              </WithStyles(ForwardRef(IconButton))>
            </WithStyles(ForwardRef(Tooltip))>
          </Link>
        </div>
      </div>
      <div
        className="preset"
      >
        <div
          className="no-entity"
        >
          <ErrorIcon
            style={
              Object {
                "color": "rgb(255, 212, 96)",
              }
            }
          />
          <span
            className="no-entity-text"
          >
            No preferences! Add some by pressing the top right pencil.
          </span>
        </div>
      </div>
      <div
        className="search"
      >
        <withStyles(DateRangePicker)
          anchorDirection="left"
          appendToBody={false}
          block={false}
          calendarInfoPosition="bottom"
          customArrowIcon={null}
          customCloseIcon={null}
          customInputIcon={null}
          dayPickerNavigationInlineStyles={null}
          daySize={50}
          disableScroll={false}
          disabled={false}
          displayFormat="MMM DD"
          enableOutsideDays={false}
          endDate={"2020-05-08T13:21:01.048Z"}
          endDateId="unique_end_date_id"
          endDatePlaceholderText="End Date"
          firstDayOfWeek={null}
          focusedInput={null}
          hideKeyboardShortcutsPanel={false}
          horizontalMargin={0}
          initialVisibleMonth={null}
          inputIconPosition="before"
          isDayBlocked={[Function]}
          isDayHighlighted={[Function]}
          isOutsideRange={[Function]}
          isRTL={false}
          keepFocusOnInput={false}
          keepOpenOnDateSelect={true}
          minimumNights={0}
          monthFormat="MMMM YYYY"
          navNext={null}
          navPosition="navPositionTop"
          navPrev={null}
          noBorder={true}
          numberOfMonths={2}
          onClose={[Function]}
          onDatesChange={[Function]}
          onFocusChange={[Function]}
          onNextMonthClick={[Function]}
          onPrevMonthClick={[Function]}
          openDirection="up"
          orientation="horizontal"
          phrases={
            Object {
              "calendarLabel": "Calendar",
              "chooseAvailableEndDate": [Function],
              "chooseAvailableStartDate": [Function],
              "clearDates": "Clear Dates",
              "closeDatePicker": "Close",
              "dateIsSelected": [Function],
              "dateIsSelectedAsEndDate": [Function],
              "dateIsSelectedAsStartDate": [Function],
              "dateIsUnavailable": [Function],
              "enterKey": "Enter key",
              "escape": "Escape key",
              "focusStartDate": "Interact with the calendar and add the check-in date for your trip.",
              "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
              "homeEnd": "Home and end keys",
              "jumpToNextMonth": "Move forward to switch to the next month.",
              "jumpToPrevMonth": "Move backward to switch to the previous month.",
              "keyboardBackwardNavigationInstructions": "Navigate backward to interact with the calendar and select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
              "keyboardForwardNavigationInstructions": "Navigate forward to interact with the calendar and select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
              "keyboardShortcuts": "Keyboard Shortcuts",
              "leftArrowRightArrow": "Right and left arrow keys",
              "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
              "moveFocusByOneMonth": "Switch months.",
              "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
              "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
              "openThisPanel": "Open this panel.",
              "pageUpPageDown": "page up and page down keys",
              "questionMark": "Question mark",
              "returnFocusToInput": "Return to the date input field.",
              "roleDescription": "datepicker",
              "selectFocusedDate": "Select the date in focus.",
              "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
              "upArrowDownArrow": "up and down arrow keys",
            }
          }
          readOnly={false}
          regular={false}
          renderCalendarInfo={null}
          renderDayContents={null}
          renderMonthElement={null}
          renderMonthText={null}
          renderNavNextButton={null}
          renderNavPrevButton={null}
          renderWeekHeaderElement={null}
          reopenPickerOnClearDates={false}
          required={false}
          screenReaderInputMessage=""
          showClearDates={false}
          showDefaultInputIcon={true}
          small={true}
          startDate={"2020-05-01T13:21:01.048Z"}
          startDateId="unique_start_date_id"
          startDatePlaceholderText="Start Date"
          verticalHeight={null}
          verticalSpacing={22}
          weekDayFormat="dd"
          withFullScreenPortal={false}
          withPortal={false}
        />
      </div>
    </WithStyles(ForwardRef(Paper))>
  </div>
  <div
    className="meetupsInnerWrap"
  >
    <WithStyles(ForwardRef(Paper))
      className="meetupsInnerHeader"
      elevation={2}
      square={true}
    >
      <div>
        Meetups
        <WithStyles(ForwardRef(Tooltip))
          title="Public Meetups"
        >
          <WithStyles(ForwardRef(IconButton))
            aria-label="public-meetups"
            color="primary"
            edge="end"
            onClick={[Function]}
          >
            <PublicIcon />
          </WithStyles(ForwardRef(IconButton))>
        </WithStyles(ForwardRef(Tooltip))>
        <WithStyles(ForwardRef(Tooltip))
          title="Your Meetups"
        >
          <WithStyles(ForwardRef(IconButton))
            aria-label="private-meetups"
            color="default"
            onClick={[Function]}
          >
            <PeopleIcon />
          </WithStyles(ForwardRef(IconButton))>
        </WithStyles(ForwardRef(Tooltip))>
      </div>
      <div
        className="meetupsSearchBar"
      >
        <SearchIcon />
        <CategoryAutocomplete
          entries={Array []}
          fullWidth={true}
          handleClick={[Function]}
          label="Search Categories..."
          size="small"
        />
      </div>
      <div
        className="categoryChip"
      >
        25
         miles
      </div>
      <WithStyles(ForwardRef(Tooltip))
        title="Add Meetup"
      >
        <WithStyles(ForwardRef(IconButton))
          aria-label="add-meetup"
          onClick={[Function]}
          style={
            Object {
              "color": "black",
            }
          }
        >
          <AddIcon />
        </WithStyles(ForwardRef(IconButton))>
      </WithStyles(ForwardRef(Tooltip))>
      <Connect(ReduxForm)
        handleClose={[Function]}
        open={false}
        type="create"
      />
    </WithStyles(ForwardRef(Paper))>
    <div
      className="meetupsContainer"
      style={
        Object {
          "minHeight": "0",
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        container={true}
        spacing={1}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
          key="1"
          lg={6}
          xl={4}
          xs={12}
        >
          <ForwardRef(Grow)
            in={true}
            timeout={500}
          >
            <div
              className="meetups-cardwrapper"
            >
              <MeetupCard
                key="1"
                meetup={
                  Object {
                    "categories": Array [
                      Object {
                        "api_label": "desserts",
                        "id": 1,
                        "image": null,
                        "label": "Dessert",
                      },
                    ],
                    "creator": Object {
                      "avatar": null,
                      "email": "daniel@gmail.com",
                      "first_name": "Daniel",
                      "id": 1,
                      "last_name": "Lee",
                    },
                    "date": "2020-05-01",
                    "events": Object {},
                    "id": 1,
                    "isMeetupEventsInitialized": true,
                    "latitude": 34.228754,
                    "location": "location",
                    "longitude": -118.2351192,
                    "members": Object {
                      "1": Object {
                        "admin": true,
                        "ban": false,
                        "id": 1,
                        "user": Object {
                          "avatar": null,
                          "email": "daniel@gmail.com",
                          "first_name": "Daniel",
                          "id": 1,
                          "last_name": "Lee",
                        },
                      },
                      "2": Object {
                        "admin": false,
                        "ban": false,
                        "id": 2,
                        "user": Object {
                          "avatar": null,
                          "email": "example2@gmail.com",
                          "first_name": "Bob",
                          "id": 2,
                          "last_name": "Jim",
                        },
                      },
                    },
                    "name": "Meetup",
                    "notifs": 0,
                    "public": true,
                    "uri": "uri",
                  }
                }
              />
            </div>
          </ForwardRef(Grow)>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          key="2"
          lg={6}
          xl={4}
          xs={12}
        >
          <ForwardRef(Grow)
            in={true}
            timeout={500}
          >
            <div
              className="meetups-cardwrapper"
            >
              <MeetupCard
                key="2"
                meetup={
                  Object {
                    "categories": Array [
                      Object {
                        "api_label": "desserts",
                        "id": 1,
                        "image": null,
                        "label": "Dessert",
                      },
                    ],
                    "creator": Object {
                      "avatar": null,
                      "email": "daniel@gmail.com",
                      "first_name": "Daniel",
                      "id": 1,
                      "last_name": "Lee",
                    },
                    "date": "2020-05-01",
                    "events": Object {},
                    "id": 2,
                    "isMeetupEventsInitialized": true,
                    "latitude": 34.228754,
                    "location": "location",
                    "longitude": -118.2351192,
                    "members": Object {
                      "1": Object {
                        "admin": true,
                        "ban": false,
                        "id": 1,
                        "user": Object {
                          "avatar": null,
                          "email": "daniel@gmail.com",
                          "first_name": "Daniel",
                          "id": 1,
                          "last_name": "Lee",
                        },
                      },
                      "2": Object {
                        "admin": false,
                        "ban": false,
                        "id": 2,
                        "user": Object {
                          "avatar": null,
                          "email": "example2@gmail.com",
                          "first_name": "Bob",
                          "id": 2,
                          "last_name": "Jim",
                        },
                      },
                    },
                    "name": "Meetup",
                    "notifs": 0,
                    "public": false,
                    "uri": "uri2",
                  }
                }
              />
            </div>
          </ForwardRef(Grow)>
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </div>
  </div>
</div>
`;
