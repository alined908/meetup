// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Meetup tests general renders without crashing given props 1`] = `
<div
  className="innerWrap  "
>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <meta
      charSet="utf-8"
    />
    <title>
      Meetup
    </title>
  </HelmetWrapper>
  <div
    className="innerLeft  innerLeft-show"
  >
    <div
      className="innerLeftHeader"
    >
      <span>
        Meetup
      </span>
      <span>
        <WithStyles(ForwardRef(Button))
          aria-label="join-meetup"
          onClick={[Function]}
          size="small"
          style={
            Object {
              "background": "#45B649",
              "color": "white",
            }
          }
          variant="contained"
        >
          Join Meetup
        </WithStyles(ForwardRef(Button))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="meetup-menu"
          edge="end"
          onClick={[Function]}
          style={
            Object {
              "color": "rgba(10,10,10, .95)",
            }
          }
        >
          <MoreVertIcon />
        </WithStyles(ForwardRef(IconButton))>
      </span>
      <WithStyles(ForwardRef(Menu))
        anchorEl={null}
        onClose={[Function]}
        open={null}
      >
        <WithStyles(ForwardRef(MenuItem))
          aria-label="email"
          disabled={true}
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(ListItemIcon))>
            <EmailIcon
              fontSize="small"
              style={
                Object {
                  "color": "black",
                }
              }
            />
          </WithStyles(ForwardRef(ListItemIcon))>
          <WithStyles(ForwardRef(Typography))
            noWrap={true}
            variant="body2"
          >
            Send Email
          </WithStyles(ForwardRef(Typography))>
        </WithStyles(ForwardRef(MenuItem))>
        <WithStyles(ForwardRef(MenuItem))
          aria-label="edit"
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(ListItemIcon))>
            <EditIcon
              fontSize="small"
              style={
                Object {
                  "color": "black",
                }
              }
            />
          </WithStyles(ForwardRef(ListItemIcon))>
          <WithStyles(ForwardRef(Typography))
            noWrap={true}
            variant="body2"
          >
            Edit Meetup
          </WithStyles(ForwardRef(Typography))>
        </WithStyles(ForwardRef(MenuItem))>
        <WithStyles(ForwardRef(MenuItem))
          aria-label="delete"
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(ListItemIcon))>
            <DeleteIcon
              color="secondary"
              fontSize="small"
            />
          </WithStyles(ForwardRef(ListItemIcon))>
          <WithStyles(ForwardRef(Typography))
            noWrap={true}
            variant="body2"
          >
            Delete Meetup
          </WithStyles(ForwardRef(Typography))>
        </WithStyles(ForwardRef(MenuItem))>
      </WithStyles(ForwardRef(Menu))>
    </div>
    <div
      className="innerLeftHeaderBlock"
    >
      <div
        className="hr"
      >
        Outline
      </div>
      <MeetupTree
        initialized={false}
        meetup={
          Object {
            "categories": Array [
              Object {
                "api_label": "desserts",
                "id": 1,
                "image": null,
                "label": "Dessert",
              },
            ],
            "creator": Object {
              "avatar": null,
              "email": "daniel@gmail.com",
              "first_name": "Daniel",
              "id": 1,
              "last_name": "Lee",
            },
            "date": "2020-07-03",
            "events": Object {},
            "id": 1,
            "isMeetupEventsInitialized": true,
            "latitude": 34.228754,
            "location": "location",
            "longitude": -118.2351192,
            "members": Object {
              "1": Object {
                "admin": true,
                "ban": false,
                "id": 1,
                "user": Object {
                  "avatar": null,
                  "email": "daniel@gmail.com",
                  "first_name": "Daniel",
                  "id": 1,
                  "last_name": "Lee",
                },
              },
              "2": Object {
                "admin": false,
                "ban": false,
                "id": 2,
                "user": Object {
                  "avatar": null,
                  "email": "example2@gmail.com",
                  "first_name": "Bob",
                  "id": 2,
                  "last_name": "Jim",
                },
              },
            },
            "name": "Meetup",
            "notifs": 0,
            "public": true,
            "uri": "uri",
          }
        }
        sortEvents={[Function]}
      />
    </div>
    <div
      className="innerLeftHeaderBlock"
    >
      <div
        className="hr"
      >
        Information
      </div>
      <div
        className="innerLeftHeaderBlockAction"
      >
        <div
          className="blockActionHeader"
        >
          Date
          <span
            className="blockActionChip"
          >
            Friday, July 3
          </span>
        </div>
      </div>
      <div
        className="innerLeftHeaderBlockAction"
      >
        <div
          aria-label="location"
          className="blockActionHeader"
        >
          Location
          <span
            className="blockActionChip"
          >
            location
          </span>
        </div>
      </div>
      <div
        className="innerLeftHeaderBlockAction"
      >
        <div
          aria-label="meetup-type"
          className="blockActionHeader"
        >
          Type
          <span
            className="blockActionChip"
          >
            Public
          </span>
        </div>
      </div>
    </div>
    <div
      className="innerLeftHeaderBlock"
    >
      <div
        className="hr"
      >
        Members
      </div>
      <MeetupMembers
        friends={
          Array [
            Object {
              "chat_room": "something",
              "created_at": "2020-07-03T13:42:55-07:00",
              "id": 1,
              "user": Object {
                "avatar": null,
                "email": "example2@gmail.com",
                "first_name": "Bob",
                "id": 2,
                "last_name": "Jim",
              },
            },
          ]
        }
        isPast={false}
        leaveMeetup={[Function]}
        meetup={
          Object {
            "categories": Array [
              Object {
                "api_label": "desserts",
                "id": 1,
                "image": null,
                "label": "Dessert",
              },
            ],
            "creator": Object {
              "avatar": null,
              "email": "daniel@gmail.com",
              "first_name": "Daniel",
              "id": 1,
              "last_name": "Lee",
            },
            "date": "2020-07-03",
            "events": Object {},
            "id": 1,
            "isMeetupEventsInitialized": true,
            "latitude": 34.228754,
            "location": "location",
            "longitude": -118.2351192,
            "members": Object {
              "1": Object {
                "admin": true,
                "ban": false,
                "id": 1,
                "user": Object {
                  "avatar": null,
                  "email": "daniel@gmail.com",
                  "first_name": "Daniel",
                  "id": 1,
                  "last_name": "Lee",
                },
              },
              "2": Object {
                "admin": false,
                "ban": false,
                "id": 2,
                "user": Object {
                  "avatar": null,
                  "email": "example2@gmail.com",
                  "first_name": "Bob",
                  "id": 2,
                  "last_name": "Jim",
                },
              },
            },
            "name": "Meetup",
            "notifs": 0,
            "public": true,
            "uri": "uri",
          }
        }
        members={
          Object {
            "1": Object {
              "admin": true,
              "ban": false,
              "id": 1,
              "user": Object {
                "avatar": null,
                "email": "daniel@gmail.com",
                "first_name": "Daniel",
                "id": 1,
                "last_name": "Lee",
              },
            },
            "2": Object {
              "admin": false,
              "ban": false,
              "id": 2,
              "user": Object {
                "avatar": null,
                "email": "example2@gmail.com",
                "first_name": "Bob",
                "id": 2,
                "last_name": "Jim",
              },
            },
          }
        }
        sendFriendInvite={[MockFunction]}
        user={
          Object {
            "avatar": null,
            "email": "daniel@gmail.com",
            "first_name": "Daniel",
            "id": 1,
            "last_name": "Lee",
          }
        }
      />
    </div>
    <div
      className="innerLeftHeaderBlock"
    >
      <div
        className="hr"
      >
        Friends
        <WithStyles(ForwardRef(Tooltip))
          title="Refresh"
        >
          <WithStyles(ForwardRef(IconButton))
            aria-label="refresh-friends"
            onClick={[Function]}
            size="small"
            style={
              Object {
                "color": "black",
              }
            }
          >
            <RefreshIcon />
          </WithStyles(ForwardRef(IconButton))>
        </WithStyles(ForwardRef(Tooltip))>
      </div>
      <MeetupFriends
        friends={
          Array [
            Object {
              "chat_room": "something",
              "created_at": "2020-07-03T13:42:55-07:00",
              "id": 1,
              "user": Object {
                "avatar": null,
                "email": "example2@gmail.com",
                "first_name": "Bob",
                "id": 2,
                "last_name": "Jim",
              },
            },
          ]
        }
        isPast={false}
        meetup={
          Object {
            "categories": Array [
              Object {
                "api_label": "desserts",
                "id": 1,
                "image": null,
                "label": "Dessert",
              },
            ],
            "creator": Object {
              "avatar": null,
              "email": "daniel@gmail.com",
              "first_name": "Daniel",
              "id": 1,
              "last_name": "Lee",
            },
            "date": "2020-07-03",
            "events": Object {},
            "id": 1,
            "isMeetupEventsInitialized": true,
            "latitude": 34.228754,
            "location": "location",
            "longitude": -118.2351192,
            "members": Object {
              "1": Object {
                "admin": true,
                "ban": false,
                "id": 1,
                "user": Object {
                  "avatar": null,
                  "email": "daniel@gmail.com",
                  "first_name": "Daniel",
                  "id": 1,
                  "last_name": "Lee",
                },
              },
              "2": Object {
                "admin": false,
                "ban": false,
                "id": 2,
                "user": Object {
                  "avatar": null,
                  "email": "example2@gmail.com",
                  "first_name": "Bob",
                  "id": 2,
                  "last_name": "Jim",
                },
              },
            },
            "name": "Meetup",
            "notifs": 0,
            "public": true,
            "uri": "uri",
          }
        }
      />
    </div>
  </div>
  <div
    className="innerRight  "
  >
    <div
      id="events-wrapper"
    />
    <div
      className="innerRightBlock"
      id="Events"
      style={
        Object {
          "overflowY": "auto",
        }
      }
    >
      <div
        className="loading"
      >
        <WithStyles(ForwardRef(CircularProgress))
          size={30}
        />
      </div>
    </div>
  </div>
</div>
`;
